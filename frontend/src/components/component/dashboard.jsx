/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/zC8reltwL63
 */
import Link from "next/link";
import { Button } from "@/components/ui/button";
import {
  DropdownMenuTrigger,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuItem,
  DropdownMenuContent,
  DropdownMenu,
} from "@/components/ui/dropdown-menu";
import { TabsTrigger, TabsList, TabsContent, Tabs } from "@/components/ui/tabs";
import {
  TableHead,
  TableRow,
  TableHeader,
  TableBody,
  Table,
} from "@/components/ui/table";
import { useEffect, useState } from "react";

export function Dashboard() {
  const [Allrider, setAllrider] = useState([]);
  const [Alldriver, setAlldriver] = useState([]);
  const [OngoingRide, setOngoingRide] = useState([]);
  const [completed, setcompleted] = useState([]);
  const [feedback, setfeedback] = useState([]);

  const tkn = localStorage.getItem("authToken");

  const getAllrider = async () => {
    const response = await fetch("http://localhost:3001/getUsers", {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        token: tkn,
      },
    });
    const data = await response.text();
    const leyy = JSON.parse(data);
    console.log(leyy);
    if (leyy.success) {
      setAllrider(leyy.data);
    } else {
      alert("unable to fetch");
    }
  };
  const getAlldriver = async () => {
    const response = await fetch("http://localhost:3001/getDrivers", {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        token: tkn,
      },
    });
    const data = await response.text();
    const leyy = JSON.parse(data);
    console.log(leyy);
    if (leyy.success) {
      setAlldriver(leyy.data);
    } else {
      alert("unable to fetch");
    }
  };
  const getAllOngoingRides = async () => {
    const response = await fetch("http://localhost:3001/getOngoingRides", {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        token: tkn,
      },
    });
    const data = await response.text();
    const leyy = JSON.parse(data);
    console.log(leyy);
    if (leyy.success) {
      setOngoingRide(leyy.data);
    } else {
      alert("unable to fetch");
    }
  };
  const getAllCompletedRides = async () => {
    const response = await fetch("http://localhost:3001/getCompletedRides", {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        token: tkn,
      },
    });
    const data = await response.text();
    const leyy = JSON.parse(data);
    console.log(leyy);
    if (leyy.success) {
      setcompleted(leyy.data);
    } else {
      alert("unable to fetch");
    }
  };
  const getAllgetAllfeedbacks = async () => {
    const response = await fetch("http://localhost:3001/getAllfeedbacks", {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        token: tkn,
      },
    });
    const data = await response.text();
    const leyy = JSON.parse(data);
    console.log(leyy);
    if (leyy.success) {
      setfeedback(leyy.data);
    } else {
      alert("unable to fetch");
    }
  };
  useEffect(() => {
    getAllrider();
    getAlldriver();
    getAllOngoingRides();
    getAllCompletedRides();
    getAllgetAllfeedbacks();
  }, []);
 

  console.log(Allrider,Alldriver,OngoingRide,completed,feedback);
  return (
    <div className="grid min-h-screen w-full overflow-hidden lg:grid-cols-[280px_1fr]">
      <div className="hidden border-r bg-gray-100/40 lg:block dark:bg-gray-800/40">
        <div className="flex flex-col gap-2">
          <div className="flex h-[60px] items-center px-6">
            <Link className="flex items-center gap-2 font-semibold" href="#">
              <CarIcon className="h-6 w-6" />
              <span className="">RideShare Inc</span>
            </Link>
          </div>
          <div className="flex-1">
            <nav className="grid items-start px-4 text-sm font-medium">
              <Link
                className="flex items-center gap-3 rounded-lg px-3 py-2 text-gray-500 transition-all hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-50"
                href="#"
              >
                <UsersIcon className="h-4 w-4" />
                All Riders
              </Link>
              <Link
                className="flex items-center gap-3 rounded-lg px-3 py-2 text-gray-500 transition-all hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-50"
                href="#"
              >
                <UsersIcon className="h-4 w-4" />
                All Drivers
              </Link>
              <Link
                className="flex items-center gap-3 rounded-lg px-3 py-2 text-gray-500 transition-all hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-50"
                href="#"
              >
                <NavigationIcon className="h-4 w-4" />
                Ongoing Rides
              </Link>
              <Link
                className="flex items-center gap-3 rounded-lg px-3 py-2 text-gray-500 transition-all hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-50"
                href="#"
              >
                <CheckIcon className="h-4 w-4" />
                Completed Rides
              </Link>
              <Link
                className="flex items-center gap-3 rounded-lg px-3 py-2 text-gray-500 transition-all hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-50"
                href="#"
              >
                <MessageCircleIcon className="h-4 w-4" />
                All Feedbacks
              </Link>
            </nav>
          </div>
        </div>
      </div>
      <div className="flex flex-col">
        <header className="flex h-14 lg:h-[60px] items-center gap-4 border-b bg-gray-100/40 px-6 dark:bg-gray-800/40">
          <Link className="lg:hidden" href="#">
            <CarIcon className="h-6 w-6" />
            <span className="sr-only">Home</span>
          </Link>
          <div className="flex-1">
            <h1 className="font-semibold text-lg">Admin Dashboard</h1>
          </div>
          <div className="">
            <Button className="rounded-md bg-white">LogOut</Button>
          </div>
        </header>
        <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-6">
          <Tabs className="w-full" defaultValue="riders">
            <TabsList className="grid w-full grid-cols-5">
              <TabsTrigger value="riders">All Riders</TabsTrigger>
              <TabsTrigger value="drivers">All Drivers</TabsTrigger>
              <TabsTrigger value="ongoing">Ongoing Rides</TabsTrigger>
              <TabsTrigger value="completed">Completed Rides</TabsTrigger>
              <TabsTrigger value="feedbacks">All Feedbacks</TabsTrigger>
            </TabsList>
            <TabsContent value="riders">
              <div className="border shadow-sm rounded-lg p-2">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Name</TableHead>
                      {/* <TableHead>Email</TableHead> */}
                    </TableRow>
                  </TableHeader>
                  <TableBody />
                </Table>
                <div className="h-[500px] overflow-scroll x-scroll-none x-overflow-hidden ">
                  {Allrider.map((value, key) => {
                    return (
                      <>
                        <Table>
                          <TableHeader>
                            <TableRow>
                              <TableHead className="w-[100px]">{value.first_name} {value.last_name}</TableHead>
                              {/* <TableHead className="w-[100px]">{value.email}</TableHead> */}
                              
                            </TableRow>
                          </TableHeader>
                          <TableBody />
                        </Table>
                      </>
                    );
                  })}
                </div>
              </div>
            </TabsContent>
            <TabsContent value="drivers">
              <div className="border shadow-sm rounded-lg p-2">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Name</TableHead>
                      <TableHead>Contact</TableHead>
                      <TableHead>Total Rides</TableHead>
                      <TableHead className="text-right">Rating</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody />
                </Table>
              </div>
            </TabsContent>
            <TabsContent value="ongoing">
              <div className="border shadow-sm rounded-lg p-2">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Ride ID</TableHead>
                      <TableHead>Rider</TableHead>
                      <TableHead>Driver</TableHead>
                      <TableHead className="text-right">Distance</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody />
                </Table>
              </div>
            </TabsContent>
            <TabsContent value="completed">
              <div className="border shadow-sm rounded-lg p-2">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Ride ID</TableHead>
                      <TableHead>Rider</TableHead>
                      <TableHead>Driver</TableHead>
                      <TableHead className="text-right">Distance</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody />
                </Table>
              </div>
            </TabsContent>
            <TabsContent value="feedbacks">
              <div className="border shadow-sm rounded-lg p-2">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Feedback ID</TableHead>
                      <TableHead>Rider</TableHead>
                      <TableHead>Driver</TableHead>
                      <TableHead className="text-right">Rating</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody />
                </Table>
              </div>
            </TabsContent>
          </Tabs>
        </main>
      </div>
    </div>
  );
}

function CarIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M19 17h2c.6 0 1-.4 1-1v-3c0-.9-.7-1.7-1.5-1.9C18.7 10.6 16 10 10s-1.3-1.4-2.2-2.3c-.5-.4-1.1-.7-1.8-.7H5c-.6 0-1.1.4-1.4.9l-1.4 2.9A3.7 3.7 2 12v4c0 .6.4 1 1h2" />
      <circle cx="7" cy="17" r="2" />
      <path d="M9 17h6" />
      <circle cx="17" cy="17" r="2" />
    </svg>
  );
}

function UsersIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M16 21v-2a4 4 0 0-4-4H6a4 0-4 4v2" />
      <circle cx="9" cy="7" r="4" />
      <path d="M22 21v-2a4 4 0 0-3-3.87" />
      <path d="M16 3.13a4 4 0 1 7.75" />
    </svg>
  );
}

function NavigationIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="3 11 22 2 13 21" />
    </svg>
  );
}

function CheckIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polyline points="20 6 9 17 4 12" />
    </svg>
  );
}

function MessageCircleIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m3 21 1.9-5.7a8.5 8.5 0 1 3.8 3.8z" />
    </svg>
  );
}
